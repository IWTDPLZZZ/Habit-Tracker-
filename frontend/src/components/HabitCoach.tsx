import { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Link } from 'react-router-dom'
import { 
  ArrowLeft, 
  Send, 
  Bot, 
  User, 
  Plus,
  Clock,
  Target,
  Heart,
  Brain,
  X,
  Lightbulb,
  Check,
  CheckSquare,
  Square,
  Sparkles,
  Zap
} from 'lucide-react'
import { Button } from '@/components/ui/button'

interface Message {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: Date
  showGoalSelection?: boolean
}

interface SuggestedHabit {
  id: string
  name: string
  description: string
  category: string
  icon: string
  difficulty: 'easy' | 'medium' | 'hard'
  timeRequired: string
}

interface GoalCategory {
  id: string
  name: string
  emoji: string
  description: string
}

interface ExistingHabit {
  id: string
  name: string
  description: string
  streak: number
  completed: boolean
  createdAt: string
  habitType?: 'good' | 'bad'
  frequency: 'daily' | 'weekly' | 'scheduled'
  reminder: string
  notifications: boolean
}

interface HabitPlan {
  id: string
  name: string
  description: string
  color: string
  icon: string
  schedule: string[]
  category: string
  difficulty: 'easy' | 'medium' | 'hard'
  timeRequired: string
}

interface DayPlan {
  day: number
  habits: string[]
}

interface AIPlan {
  goal: string
  habits: HabitPlan[]
  schedule: DayPlan[]
  totalDays: number
}

const HabitCoach = () => {
  const [existingHabits, setExistingHabits] = useState<ExistingHabit[]>([])
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [suggestedHabits, setSuggestedHabits] = useState<SuggestedHabit[]>([])
  const [showHabitTips, setShowHabitTips] = useState(false)
  const [currentMode, setCurrentMode] = useState<'chat' | 'planner'>('chat')
  const [aiPlan, setAiPlan] = useState<AIPlan | null>(null)
  const [selectedHabits, setSelectedHabits] = useState<string[]>([])
  const [showPlanCalendar, setShowPlanCalendar] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const goalCategories: GoalCategory[] = [
    {
      id: 'health',
      name: '–ó–¥–æ—Ä–æ–≤—å–µ',
      emoji: 'üèÉ',
      description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–∏—Ç–∞–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'
    },
    {
      id: 'productivity',
      name: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      emoji: 'üíª',
      description: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    },
    {
      id: 'balance',
      name: '–ë–∞–ª–∞–Ω—Å',
      emoji: '‚öñÔ∏è',
      description: '–†–∞–±–æ—Ç–∞ –∏ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å'
    }
  ]

  const generateInitialMessage = (existingHabits: ExistingHabit[], mode: 'chat' | 'planner'): string => {
    let baseMessage = mode === 'planner' 
      ? "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–≤—ã—á–µ–∫. –Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π 30-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–µ–∫."
      : "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π."
    
    if (existingHabits.length > 0) {
      const habitExamples = existingHabits.slice(0, 3).map(habit => `'${habit.name}'`).join(', ')
      baseMessage += ` –Ø –≤–∏–∂—É, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ ${habitExamples}.`
      
      if (mode === 'planner') {
        baseMessage += " –ù–æ–≤—ã–π –ø–ª–∞–Ω –∏–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä—É—Ç–∏–Ω—É."
      } else {
        baseMessage += " –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–ª–∏ –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—Å—Ç–∏?"
      }
    }
    
    baseMessage += " –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    return baseMessage
  }

  useEffect(() => {
    const storedHabits = localStorage.getItem('habits')
    if (storedHabits) {
      const habits: ExistingHabit[] = JSON.parse(storedHabits)
      setExistingHabits(habits)
      
      const initialMessage: Message = {
        id: '1',
        type: 'assistant',
        content: generateInitialMessage(habits, currentMode),
        timestamp: new Date(),
        showGoalSelection: true
      }
      setMessages([initialMessage])
    } else {
      const initialMessage: Message = {
        id: '1',
        type: 'assistant',
        content: generateInitialMessage([], currentMode),
        timestamp: new Date(),
        showGoalSelection: true
      }
      setMessages([initialMessage])
    }
  }, [currentMode])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateSuggestedHabits = (goalCategory: string) => {
    const habitSuggestions: Record<string, SuggestedHabit[]> = {
      health: [
        {
          id: 'h1',
          name: '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
          description: '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å 30 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          icon: 'üí™',
          difficulty: 'medium',
          timeRequired: '30 –º–∏–Ω'
        },
        {
          id: 'h2',
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —à–∞–≥–∏',
          description: '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ 10,000 —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          icon: 'üö∂',
          difficulty: 'easy',
          timeRequired: '45 –º–∏–Ω'
        },
        {
          id: 'h3',
          name: '–ü–∏—Ç—å –≤–æ–¥—É',
          description: '–í—ã–ø–∏–≤–∞–π—Ç–µ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          icon: 'üíß',
          difficulty: 'easy',
          timeRequired: '2 –º–∏–Ω'
        }
      ],
      productivity: [
        {
          id: 'p1',
          name: '–ì–ª—É–±–æ–∫–∏–µ —Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏',
          description: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å',
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          icon: 'üéØ',
          difficulty: 'medium',
          timeRequired: '2 —á–∞—Å–∞'
        },
        {
          id: 'p2',
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          description: '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ',
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          icon: 'üìã',
          difficulty: 'easy',
          timeRequired: '10 –º–∏–Ω'
        },
        {
          id: 'p3',
          name: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è email',
          description: '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—á—Ç—É —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          icon: 'üìß',
          difficulty: 'medium',
          timeRequired: '30 –º–∏–Ω'
        }
      ],
      balance: [
        {
          id: 'b1',
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è',
          description: '–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ 10 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ',
          category: '–ë–∞–ª–∞–Ω—Å',
          icon: 'üßò',
          difficulty: 'easy',
          timeRequired: '10 –º–∏–Ω'
        },
        {
          id: 'b2',
          name: '–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏',
          description: '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã',
          category: '–ë–∞–ª–∞–Ω—Å',
          icon: 'üìù',
          difficulty: 'easy',
          timeRequired: '5 –º–∏–Ω'
        },
        {
          id: 'b3',
          name: '–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å',
          description: '–ù–∏–∫–∞–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞',
          category: '–ë–∞–ª–∞–Ω—Å',
          icon: 'üì±',
          difficulty: 'hard',
          timeRequired: '1 —á–∞—Å'
        }
      ]
    }
    
    return habitSuggestions[goalCategory] || []
  }

  const generateAIPlan = (goalCategory: string): AIPlan => {
    const habitPlans: Record<string, HabitPlan[]> = {
      health: [
        {
          id: 'hp1',
          name: '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
          description: '30 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
          color: 'bg-green-500',
          icon: 'üí™',
          schedule: ['daily'],
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          difficulty: 'medium',
          timeRequired: '30 –º–∏–Ω'
        },
        {
          id: 'hp2',
          name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
          description: '10 –º–∏–Ω—É—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
          color: 'bg-blue-500',
          icon: 'üßò',
          schedule: ['–ü–Ω', '–°—Ä', '–ü—Ç'],
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          difficulty: 'easy',
          timeRequired: '10 –º–∏–Ω'
        },
        {
          id: 'hp3',
          name: '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
          description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏',
          color: 'bg-orange-500',
          icon: 'ü•ó',
          schedule: ['daily'],
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          difficulty: 'medium',
          timeRequired: '15 –º–∏–Ω'
        },
        {
          id: 'hp4',
          name: '–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è',
          description: '–ó–∞–ø–∏—Å—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          color: 'bg-purple-500',
          icon: 'üìù',
          schedule: ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
          category: '–ó–¥–æ—Ä–æ–≤—å–µ',
          difficulty: 'easy',
          timeRequired: '5 –º–∏–Ω'
        }
      ],
      productivity: [
        {
          id: 'pp1',
          name: '–ì–ª—É–±–æ–∫–∏–µ —Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏',
          description: '2 —á–∞—Å–∞ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
          color: 'bg-indigo-500',
          icon: 'üéØ',
          schedule: ['daily'],
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          difficulty: 'hard',
          timeRequired: '2 —á–∞—Å–∞'
        },
        {
          id: 'pp2',
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤',
          color: 'bg-yellow-500',
          icon: 'üìã',
          schedule: ['daily'],
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          difficulty: 'easy',
          timeRequired: '10 –º–∏–Ω'
        },
        {
          id: 'pp3',
          name: '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ',
          description: '30 –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è',
          color: 'bg-teal-500',
          icon: 'üìö',
          schedule: ['–ü–Ω', '–í—Ç', '–ß—Ç', '–ü—Ç'],
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          difficulty: 'medium',
          timeRequired: '30 –º–∏–Ω'
        },
        {
          id: 'pp4',
          name: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏',
          description: '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          color: 'bg-pink-500',
          icon: 'üìä',
          schedule: ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
          category: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          difficulty: 'medium',
          timeRequired: '20 –º–∏–Ω'
        }
      ],
      balance: [
        {
          id: 'bp1',
          name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
          description: '10 –º–∏–Ω—É—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
          color: 'bg-blue-500',
          icon: 'üßò',
          schedule: ['daily'],
          category: '–ë–∞–ª–∞–Ω—Å',
          difficulty: 'easy',
          timeRequired: '10 –º–∏–Ω'
        },
        {
          id: 'bp2',
          name: '–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏',
          description: '–ó–∞–ø–∏—Å—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π',
          color: 'bg-green-500',
          icon: 'üôè',
          schedule: ['daily'],
          category: '–ë–∞–ª–∞–Ω—Å',
          difficulty: 'easy',
          timeRequired: '5 –º–∏–Ω'
        },
        {
          id: 'bp3',
          name: '–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å',
          description: '–û—Ç–¥—ã—Ö –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤',
          color: 'bg-red-500',
          icon: 'üì±',
          schedule: ['–°–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
          category: '–ë–∞–ª–∞–Ω—Å',
          difficulty: 'hard',
          timeRequired: '2 —á–∞—Å–∞'
        },
        {
          id: 'bp4',
          name: '–ü—Ä–∏—Ä–æ–¥–∞ –∏ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö',
          description: '–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
          color: 'bg-emerald-500',
          icon: 'üå≥',
          schedule: ['–°–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
          category: '–ë–∞–ª–∞–Ω—Å',
          difficulty: 'easy',
          timeRequired: '30 –º–∏–Ω'
        }
      ]
    }

    const habits = habitPlans[goalCategory] || []
    const schedule: DayPlan[] = []
    
    for (let day = 1; day <= 30; day++) {
      const dayHabits: string[] = []
      
      habits.forEach(habit => {
        if (habit.schedule.includes('daily')) {
          dayHabits.push(habit.id)
        } else {
          const dayOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][day % 7]
          if (habit.schedule.includes(dayOfWeek)) {
            dayHabits.push(habit.id)
          }
        }
      })
      
      schedule.push({ day, habits: dayHabits })
    }

    return {
      goal: goalCategory,
      habits,
      schedule,
      totalDays: 30
    }
  }

  const handleGoalSelection = (goalId: string) => {
    const selectedCategory = goalCategories.find(g => g.id === goalId)
    
    if (selectedCategory) {
      const userMessage: Message = {
        id: Date.now().toString(),
        type: 'user',
        content: `${selectedCategory.emoji} ${selectedCategory.name}`,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, userMessage])
      setIsTyping(true)
      
      setTimeout(() => {
        if (currentMode === 'planner') {
          const plan = generateAIPlan(goalId)
          setAiPlan(plan)
          setShowPlanCalendar(true)
          
          const responseContent = `ü§ñ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π 30-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–∏–≤—ã—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory.name.toLowerCase()}". –≠—Ç–æ—Ç –ø–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç ${plan.habits.length} –ø—Ä–∏–≤—ã—á–µ–∫ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.`
          
          const assistantMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'assistant',
            content: responseContent,
            timestamp: new Date()
          }
          
          setMessages(prev => [...prev, assistantMessage])
        } else {
          const suggestions = generateSuggestedHabits(goalId)
          setSuggestedHabits(suggestions)
          
          let responseContent = `ü§ñ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory.name.toLowerCase()}". –≠—Ç–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å –ª—É—á—à–µ–≥–æ ${selectedCategory.description.toLowerCase()}.`
          
          if (existingHabits.length > 0) {
            const categoryKeywords: Record<string, string[]> = {
              health: ['exercise', 'workout', 'water', 'sleep', 'run', 'walk', 'fitness'],
              productivity: ['work', 'plan', 'focus', 'study', 'read', 'write'],
              balance: ['meditat', 'journal', 'relax', 'gratitude', 'mindful']
            }
            
            const keywords = categoryKeywords[goalId] || []
            const relatedHabits = existingHabits.filter(habit => 
              keywords.some(keyword => habit.name.toLowerCase().includes(keyword))
            )
            
            if (relatedHabits.length > 0) {
              responseContent += ` –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '${relatedHabits[0].name}' - —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –≠—Ç–∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä—É—Ç–∏–Ω—É.`
            }
          }
          
          responseContent += ' –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç:'
          
          const assistantMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'assistant',
            content: responseContent,
            timestamp: new Date()
          }
          
          setMessages(prev => [...prev, assistantMessage])
        }
        
        setIsTyping(false)
      }, 1500)
    }
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)

    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: "ü§ñ –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–µ–∫, –∏–ª–∏ –º—ã –º–æ–∂–µ–º –∏–∑—É—á–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.",
        timestamp: new Date()
      }

      setMessages(prev => [...prev, assistantMessage])
      setIsTyping(false)
    }, 1500)
  }

  const handleAddHabit = (habit: SuggestedHabit) => {
    const existingHabits = JSON.parse(localStorage.getItem('habits') || '[]')
    const newHabit = {
      id: Date.now().toString(),
      name: habit.name,
      description: habit.description,
      streak: 0,
      completed: false,
      createdAt: new Date().toISOString(),
      habitType: 'good',
      frequency: 'daily',
      reminder: '',
      notifications: true
    }
    
    const updatedHabits = [...existingHabits, newHabit]
    localStorage.setItem('habits', JSON.stringify(updatedHabits))
    
    const confirmationMessage: Message = {
      id: Date.now().toString(),
      type: 'assistant',
      content: `ü§ñ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –Ø –¥–æ–±–∞–≤–∏–ª "${habit.name}" –≤ –≤–∞—à—É –ø–∞–Ω–µ–ª—å –ø—Ä–∏–≤—ã—á–µ–∫. –≠—Ç–æ ${habit.difficulty === 'easy' ? '–ª–µ–≥–∫–∞—è' : habit.difficulty === 'medium' ? '—Å—Ä–µ–¥–Ω—è—è' : '—Å–ª–æ–∂–Ω–∞—è'} –ø—Ä–∏–≤—ã—á–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ ${habit.timeRequired} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤ —Å–≤–æ–µ–π –ø–∞–Ω–µ–ª–∏ (/app). –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É?`,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, confirmationMessage])
    
    setSuggestedHabits(prev => prev.filter(h => h.id !== habit.id))
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'hard': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const handleHabitSelection = (habitId: string) => {
    setSelectedHabits(prev => 
      prev.includes(habitId) 
        ? prev.filter(id => id !== habitId)
        : [...prev, habitId]
    )
  }

  const handleAcceptAllHabits = () => {
    if (!aiPlan) return
    
    const existingHabits = JSON.parse(localStorage.getItem('habits') || '[]')
    const newHabits = aiPlan.habits.map(habit => ({
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: habit.name,
      description: habit.description,
      streak: 0,
      completed: false,
      createdAt: new Date().toISOString(),
      habitType: 'good' as const,
      frequency: habit.schedule.includes('daily') ? 'daily' as const : 'weekly' as const,
      reminder: '',
      notifications: true
    }))
    
    const updatedHabits = [...existingHabits, ...newHabits]
    localStorage.setItem('habits', JSON.stringify(updatedHabits))
    
    const confirmationMessage: Message = {
      id: Date.now().toString(),
      type: 'assistant',
      content: `ü§ñ –û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª –≤—Å–µ ${aiPlan.habits.length} –ø—Ä–∏–≤—ã—á–µ–∫ –≤ –≤–∞—à Dashboard. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏" (/app). –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!`,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, confirmationMessage])
    setAiPlan(null)
    setShowPlanCalendar(false)
  }

  const handleAcceptSelectedHabits = () => {
    if (!aiPlan || selectedHabits.length === 0) return
    
    const existingHabits = JSON.parse(localStorage.getItem('habits') || '[]')
    const newHabits = aiPlan.habits
      .filter(habit => selectedHabits.includes(habit.id))
      .map(habit => ({
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        name: habit.name,
        description: habit.description,
        streak: 0,
        completed: false,
        createdAt: new Date().toISOString(),
        habitType: 'good' as const,
        frequency: habit.schedule.includes('daily') ? 'daily' as const : 'weekly' as const,
        reminder: '',
        notifications: true
      }))
    
    const updatedHabits = [...existingHabits, ...newHabits]
    localStorage.setItem('habits', JSON.stringify(updatedHabits))
    
    const confirmationMessage: Message = {
      id: Date.now().toString(),
      type: 'assistant',
      content: `ü§ñ –û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª ${selectedHabits.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –≤ –≤–∞—à Dashboard. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏" (/app). –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!`,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, confirmationMessage])
    setAiPlan(null)
    setShowPlanCalendar(false)
    setSelectedHabits([])
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex">
      <motion.div 
        className="w-80 bg-white/80 backdrop-blur-sm border-r border-gray-200 flex flex-col"
        initial={{ x: -320 }}
        animate={{ x: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">–ò–ò-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º</h3>
              <p className="text-sm text-gray-500">–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
            </div>
          </div>
        </div>

        <div className="p-6 space-y-4">
          <h4 className="text-sm font-semibold text-gray-500 uppercase tracking-wide">
            –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
          </h4>
          <div className="space-y-2">
            <Button 
              variant={currentMode === 'chat' ? 'default' : 'outline'} 
              className="w-full justify-start"
              onClick={() => setCurrentMode('chat')}
            >
              <Bot className="w-4 h-4 mr-2" />
              –ß–∞—Ç —Å –ò–ò
            </Button>
            <Button 
              variant={currentMode === 'planner' ? 'default' : 'outline'} 
              className="w-full justify-start"
              onClick={() => setCurrentMode('planner')}
            >
              <Sparkles className="w-4 h-4 mr-2" />
              AI-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            </Button>
          </div>
          
          <h4 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mt-6">
            –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          </h4>
          <div className="space-y-2">
            <Button variant="outline" className="w-full justify-start" asChild>
              <Link to="/habits">
                <Target className="w-4 h-4 mr-2" />
                –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏
              </Link>
            </Button>
            <Button variant="outline" className="w-full justify-start">
              <Heart className="w-4 h-4 mr-2" />
              –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            </Button>
            <Button 
              variant="outline" 
              className="w-full justify-start"
              onClick={() => setShowHabitTips(true)}
            >
              <Brain className="w-4 h-4 mr-2" />
              –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
            </Button>
          </div>
        </div>

        {suggestedHabits.length > 0 && (
          <div className="p-6 border-t border-gray-200">
            <h4 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-3">
              –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
            </h4>
            <div className="space-y-2">
              {suggestedHabits.map((habit) => (
                <div key={habit.id} className="p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-lg">{habit.icon}</span>
                    <span className="text-sm font-medium">{habit.name}</span>
                  </div>
                  <p className="text-xs text-gray-600 mb-2">{habit.description}</p>
                  <div className="flex items-center justify-between">
                    <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(habit.difficulty)}`}>
                      {habit.difficulty}
                    </span>
                    <span className="text-xs text-gray-500">{habit.timeRequired}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="p-6 border-t border-gray-200 mt-auto">
          <Button variant="outline" className="w-full" asChild>
            <Link to="/">
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </Link>
          </Button>
        </div>
      </motion.div>

      <div className="flex-1 flex flex-col">
        <motion.header 
          className="bg-white/80 backdrop-blur-sm border-b border-gray-200 p-6"
          initial={{ y: -100 }}
          animate={{ y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button variant="outline" size="sm" asChild>
                <Link to="/">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </Link>
              </Button>
              <h1 className="text-xl font-semibold text-gray-900">
                {currentMode === 'planner' ? 'AI-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–≤—ã—á–µ–∫' : '–ò–ò-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º'}
              </h1>
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              –û–Ω–ª–∞–π–Ω
            </div>
          </div>
        </motion.header>

        <div className="flex-1 overflow-y-auto p-6 space-y-4">
          <AnimatePresence>
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex items-start gap-3 max-w-2xl ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    message.type === 'user' 
                      ? 'bg-gray-500' 
                      : 'bg-gradient-to-br from-purple-500 to-pink-500'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="w-4 h-4 text-white" />
                    ) : (
                      <span className="text-lg">ü§ñ</span>
                    )}
                  </div>
                  <div className={`px-4 py-3 rounded-2xl ${
                    message.type === 'user'
                      ? 'bg-gray-500 text-white'
                      : 'bg-gradient-to-br from-purple-500 to-purple-600 text-white'
                  }`}>
                    <p className="text-sm">{message.content}</p>
                    
                    {message.showGoalSelection && (
                      <div className="mt-4 space-y-2">
                        {goalCategories.map((goal) => (
                          <Button
                            key={goal.id}
                            onClick={() => handleGoalSelection(goal.id)}
                            className="w-full justify-start bg-gray-50 hover:bg-gray-100 text-gray-800 border border-gray-200"
                            size="sm"
                          >
                            <span className="text-lg mr-2">{goal.emoji}</span>
                            <div className="text-left">
                              <div className="font-medium">{goal.name}</div>
                              <div className="text-xs text-gray-600">{goal.description}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    )}
                    
                    <p className={`text-xs mt-1 ${
                      message.type === 'user' ? 'text-gray-100' : 'text-purple-100'
                    }`}>
                      {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </p>
                  </div>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>

          {isTyping && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex justify-start"
            >
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                  <span className="text-lg">ü§ñ</span>
                </div>
                <div className="bg-white border border-gray-200 px-4 py-3 rounded-2xl">
                  <div className="flex items-center gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {suggestedHabits.length > 0 && (
          <motion.div 
            className="bg-white/80 backdrop-blur-sm border-t border-gray-200 p-6"
            initial={{ y: 100 }}
            animate={{ y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {suggestedHabits.map((habit) => (
                <motion.div
                  key={habit.id}
                  className="bg-white border border-gray-200 rounded-xl p-4 hover:shadow-md transition-shadow"
                  whileHover={{ scale: 1.02 }}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="flex items-start gap-3 mb-3">
                    <span className="text-2xl">{habit.icon}</span>
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">{habit.name}</h4>
                      <p className="text-sm text-gray-600">{habit.description}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-xs text-gray-500">{habit.category}</span>
                    <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(habit.difficulty)}`}>
                      {habit.difficulty}
                    </span>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500 flex items-center gap-1">
                      <Clock className="w-3 h-3" />
                      {habit.timeRequired}
                    </span>
                    <Button 
                      size="sm" 
                      onClick={() => handleAddHabit(habit)}
                      className="bg-blue-500 hover:bg-blue-600"
                    >
                      <Plus className="w-3 h-3 mr-1" />
                      –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏
                    </Button>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        <div className="bg-white/80 backdrop-blur-sm border-t border-gray-200 p-6">
          <div className="flex items-center gap-3">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–µ–∫..."
              className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isTyping}
              className="bg-blue-500 hover:bg-blue-600 disabled:opacity-50"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {showHabitTips && (
        <motion.div 
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={() => setShowHabitTips(false)}
        >
          <motion.div 
            className="bg-white rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto p-6"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                  <Lightbulb className="w-5 h-5 text-white" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900">–°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫</h3>
              </div>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowHabitTips(false)}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-xl border border-green-200">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white font-bold">1</span>
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold text-green-800 mb-2">–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ</h4>
                    <p className="text-green-700">
                      –ù–∞—á–Ω–∏—Ç–µ —Å –∫—Ä–æ—à–µ—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ —á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ? –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–µ–Ω—å. 
                      –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã —Å–æ–∑–¥–∞—é—Ç –∏–º–ø—É–ª—å—Å –∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏–≤—ã—á–∫–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è.
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-xl border border-blue-200">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white font-bold">2</span>
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold text-blue-800 mb-2">–°–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏</h4>
                    <p className="text-blue-700">
                      –°–≤—è–∑—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä—É—Ç–∏–Ω–∞–º–∏. "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —è –Ω–∞–ª—å—é —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ, —è –∑–∞–ø–∏—à—É –æ–¥–Ω—É –≤–µ—â—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω." 
                      –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –≤–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-purple-50 to-purple-100 p-6 rounded-xl border border-purple-200">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white font-bold">3</span>
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold text-purple-800 mb-2">–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ä–µ–¥—É</h4>
                    <p className="text-purple-700">
                      –°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—á–µ–≤–∏–¥–Ω—ã–º–∏, –∞ –ø–ª–æ—Ö–∏–µ - –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–º–∏. –ü–æ–ª–æ–∂–∏—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –æ–¥–µ–∂–¥—É —Ä—è–¥–æ–º —Å –∫—Ä–æ–≤–∞—Ç—å—é. 
                      –°–ø—Ä—è—á—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞. –í–∞—à–∞ —Å—Ä–µ–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-orange-50 to-orange-100 p-6 rounded-xl border border-orange-200">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-white font-bold">4</span>
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold text-orange-800 mb-2">–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏</h4>
                    <p className="text-orange-700">
                      –ù–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏, —Å—Ç–∞–Ω—å—Ç–µ —Ç–µ–º —Ç–∏–ø–æ–º —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —ç—Ç–∏ –≤–µ—â–∏. –í–º–µ—Å—Ç–æ "–Ø —Ö–æ—á—É –ø—Ä–æ–±–µ–∂–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω" 
                      –¥—É–º–∞–π—Ç–µ "–Ø –±–µ–≥—É–Ω." –ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ –≥–æ–ª–æ—Å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å.
                    </p>
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-6 pt-6 border-t border-gray-200">
              <Button 
                onClick={() => setShowHabitTips(false)}
                className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
              >
                –ü–æ–Ω—è—Ç–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–≤—ã—á–µ–∫
              </Button>
            </div>
          </motion.div>
        </motion.div>
      )}

      {showPlanCalendar && aiPlan && (
        <motion.div 
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={() => {
            setShowPlanCalendar(false)
            setAiPlan(null)
            setSelectedHabits([])
          }}
        >
          <motion.div 
            className="bg-white rounded-2xl w-full max-w-6xl max-h-[90vh] overflow-y-auto p-6"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π</h3>
              </div>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => {
                  setShowPlanCalendar(false)
                  setAiPlan(null)
                  setSelectedHabits([])
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <div className="mb-6 p-4 bg-gray-50 rounded-xl">
              <h4 className="text-sm font-semibold text-gray-700 mb-3">–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä–∏–≤—ã—á–µ–∫:</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {aiPlan.habits.map((habit) => (
                  <div key={habit.id} className="flex items-center gap-2">
                    <div className={`w-4 h-4 rounded-full ${habit.color}`}></div>
                    <span className="text-sm text-gray-600">{habit.name}</span>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 30 –¥–Ω–µ–π</h4>
              <div className="grid grid-cols-7 gap-2">
                {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day => (
                  <div key={day} className="text-center text-sm font-medium text-gray-500 p-2">
                    {day}
                  </div>
                ))}
                {aiPlan.schedule.map((dayPlan) => (
                  <motion.div
                    key={dayPlan.day}
                    className="aspect-square border border-gray-200 rounded-lg p-2 relative"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: dayPlan.day * 0.01 }}
                  >
                    <div className="text-xs font-medium text-gray-600 mb-1">
                      {dayPlan.day}
                    </div>
                    <div className="flex flex-wrap gap-1">
                      {dayPlan.habits.map((habitId) => {
                        const habit = aiPlan.habits.find(h => h.id === habitId)
                        return habit ? (
                          <div
                            key={habitId}
                            className={`w-2 h-2 rounded-full ${habit.color}`}
                            title={habit.name}
                          />
                        ) : null
                      })}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>

            <div className="mb-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">–ü—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–ª–∞–Ω–µ:</h4>
              <div className="space-y-3">
                {aiPlan.habits.map((habit) => (
                  <motion.div
                    key={habit.id}
                    className={`p-4 border rounded-xl cursor-pointer transition-all ${
                      selectedHabits.includes(habit.id)
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleHabitSelection(habit.id)}
                    whileHover={{ scale: 1.02 }}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-2">
                        {selectedHabits.includes(habit.id) ? (
                          <CheckSquare className="w-5 h-5 text-blue-500" />
                        ) : (
                          <Square className="w-5 h-5 text-gray-400" />
                        )}
                        <span className="text-lg">{habit.icon}</span>
                      </div>
                      <div className="flex-1">
                        <h5 className="font-semibold text-gray-900">{habit.name}</h5>
                        <p className="text-sm text-gray-600">{habit.description}</p>
                        <div className="flex items-center gap-4 mt-2">
                          <span className="text-xs text-gray-500">
                            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {habit.schedule.join(', ')}
                          </span>
                          <span className="text-xs text-gray-500">
                            –í—Ä–µ–º—è: {habit.timeRequired}
                          </span>
                          <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(habit.difficulty)}`}>
                            {habit.difficulty}
                          </span>
                        </div>
                      </div>
                      <div className={`w-4 h-4 rounded-full ${habit.color}`}></div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>

            <div className="flex gap-3 pt-6 border-t border-gray-200">
              <Button 
                onClick={handleAcceptAllHabits}
                className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700"
              >
                <Check className="w-4 h-4 mr-2" />
                –ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞–Ω —Ü–µ–ª–∏–∫–æ–º
              </Button>
              <Button 
                onClick={handleAcceptSelectedHabits}
                disabled={selectedHabits.length === 0}
                className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 disabled:opacity-50"
              >
                <Zap className="w-4 h-4 mr-2" />
                –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –≤—Ä—É—á–Ω—É—é ({selectedHabits.length})
              </Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  )
}

export default HabitCoach